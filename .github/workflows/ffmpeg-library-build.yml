name: ffmpeg-library-build
#
on:
  push:
    paths:
      - 'Dockerfile'
      - 'scripts/base.sh'
      - 'scripts/build-library.sh'
      - '.github/workflows/ffmpeg-library-build.yml'
    branches: [main]
#
jobs:
  build:
    permissions: write-all
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/') == false
    strategy:
      matrix:
        os: [linux, qsv-linux, windows]
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        
      # Repo metadata
      - name: Repo metadata
        id: repo
        uses: actions/github-script@v3
        with:
          script: |
            const repo = await github.repos.get(context.repo)
            return repo.data
      # Prepare variables
      - name: Prepare
        id: prep
        run: |
          REG=ghcr.io
          IMAGE=$(echo ${{ github.repository }} | tr '[:upper:]' '[:lower:]')
          DOCKER_IMAGE=${REG}/${IMAGE}
          VERSION=nool
          if [ "${{ github.event_name }}" = "schedule" ]; then
            VERSION=nightly
          elif [[ $GITHUB_REF == refs/tags/* ]]; then
            VERSION=${GITHUB_REF#refs/tags/}
          elif [[ $GITHUB_REF == refs/heads/* ]]; then
            VERSION=$(echo ${GITHUB_REF#refs/heads/} | sed -r 's#/+#-#g')
            if [ "${{ github.event.repository.default_branch }}" = "$VERSION" ]; then
              VERSION=latest
            fi
          elif [[ $GITHUB_REF == refs/pull/* ]]; then
            VERSION=pr-${{ github.event.number }}
          fi
          TAGS="${DOCKER_IMAGE}:${VERSION}"
          if [[ $VERSION =~ ^v[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}$ ]]; then
            MINOR=${VERSION%.*}
            MAJOR=${MINOR%.*}
            TAGS="$TAGS,${DOCKER_IMAGE}:${MINOR},${DOCKER_IMAGE}:${MAJOR},${DOCKER_IMAGE}:latest"
          fi
          echo ::set-output name=version::${VERSION}
          echo ::set-output name=tags::${TAGS}
          echo ::set-output name=created::$(date -u +'%Y-%m-%dT%H:%M:%SZ')
      #
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      #- name: Cache Docker layers
      #  uses: actions/cache@v2
      #  with:
      #    path: /tmp/.buildx-cache
      #    key: ${{ runner.os }}-${{ github.workflow }}-${{ github.sha }}
      #    restore-keys: |
      #      ${{ runner.os }}-${{ github.workflow }}-
      #
      #- name: Save Cache Docker layers
      #  id: cache-docker-layers-save
      #  uses: actions/cache/save@v3
      #  with:
      #    path: |
      #      /tmp/.buildx-cache
      #    key: ${{ runner.os }}-${{ github.workflow }}-${{ matrix.ffmpeg }}-${{ matrix.hwaccel }}-${{ github.sha }}
      #    #restore-keys: |
      #    #  ${{ runner.os }}-${{ github.workflow }}-${{ matrix.ffmpeg }}-${{ matrix.hwaccel }}-
      #
      # Login
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      #
      - name: Set build target (windows)
        if: matrix.os == 'windows'
        run: |
          echo "target_os=Windows" >> $GITHUB_ENV
      #
      - name: Build ffmpeg-build-base
        uses: docker/build-push-action@v2
        with:
          context: ./
          file: ./Dockerfile
          tags: |
            ghcr.io/allan-nava/ffmpeg-library-build:${{ matrix.os }}
          build-args: |
            TARGET_OS=${{ env.target_os }}
          target: ffmpeg-library
          platforms: linux/amd64
          push: true
          #cache-from: type=local,src=/tmp/.buildx-cache
          #cache-to: type=local,dest=/tmp/.buildx-cache-new,mode=max
          labels: |
            org.opencontainers.image.title=${{ fromJson(steps.repo.outputs.result).name }}
            org.opencontainers.image.description=${{ fromJson(steps.repo.outputs.result).description }}
            org.opencontainers.image.url=${{ fromJson(steps.repo.outputs.result).html_url }}
            org.opencontainers.image.source=${{ fromJson(steps.repo.outputs.result).html_url }}
            org.opencontainers.image.version=${{ steps.prep.outputs.version }}
            org.opencontainers.image.created=${{ steps.prep.outputs.created }}
            org.opencontainers.image.revision=${{ github.sha }}
      #
      #- name: Move cache # https://github.com/docker/build-push-action/issues/252
      #  run: |
      #    rm -rf /tmp/.buildx-cache
      #    mv /tmp/.buildx-cache-new /tmp/.buildx-cache
#
